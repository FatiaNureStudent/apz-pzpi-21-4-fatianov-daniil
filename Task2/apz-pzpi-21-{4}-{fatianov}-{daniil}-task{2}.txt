Проєкт складається з декількох сервісів, які мають схожу між собою 
структуру. Спочатку було створено контролери сервісів, які забезпечують прийом 
та обробку запитів. Було створено наступні контролери: AuthenticationController, 
UserController, VehicleController, StationController, OrderController. Нижче наведено 
приклад контролеру AuthenticationController:
1. @RestController
2. @RequestMapping("/user-service/auth")
3. @RequiredArgsConstructor
4. public class AuthenticationController {
5. 
6. private final AuthenticationService authenticationService;
7. 
8. @Operation(summary = "Register a new user",
9. description = "Registers a new user and returns 
authentication details.",
10. responses = {
11. @ApiResponse(responseCode = "200", description 
= "User registered successfully"),
12. @ApiResponse(responseCode = "400", description 
= "Invalid request data")
13. })
14. @PostMapping("/register")
15. public ResponseEntity<AuthenticationResponse> register(
16. @RequestBody RegisterRequest request
17. ){
18. return 
ResponseEntity.ok(authenticationService.register(request));
19. }
20. 
21. @Operation(summary = "Authenticate a user",
22. description = "Authenticates a user and returns 
authentication token.",
23. responses = {
24. @ApiResponse(responseCode = "200", description 
= "Authentication successful"),
25. @ApiResponse(responseCode = "401", description 
= "Authentication failed")
26. })
27. @PostMapping("/authenticate")
28. public ResponseEntity<AuthenticationResponse> register(
29. @RequestBody AuthenticationRequest request
8
30. ){
31. return 
ResponseEntity.ok(authenticationService.authenticate(request));
32. }
33. 
34. @Operation(summary = "Check admin rights",
35. description = "Checks if the token provided belongs 
to an admin user.",
36. responses = {
37. @ApiResponse(responseCode = "200", description 
= "Admin rights confirmed"),
38. @ApiResponse(responseCode = "400", description 
= "Bad request, invalid token")
39. })
40. @GetMapping("/is-admin")
41. public ResponseEntity<Boolean> isAdmin(
42. @RequestParam String token
43. ) {
44. try{
45. return 
ResponseEntity.ok().body(authenticationService.isAdmin(token));
46. }catch(Exception ex){
47. return ResponseEntity.badRequest().body(false);
48. }
49. 
50. }
51. }
Першим чином розберемо структуру контролеру. Він мість анотації: 
@RestController для визначення, що цей клас є контролером, далі 
@RequestMapping("/user-service/auth") для визначення шляху до цього контролеру 
та @RequiredArgsConstructor для автоматичної генерації конструктору класу з 
включеними у неї іншими частинами проєкту, які визначені в коді. Далі @Operation
це анотація swagger для генерування документації. Далі можна побачити анотації 
@PostMapping. Вони визначають шлях до конкретних функцій контролеру.
Анотація @RequestBody визначає, що функція має приймати тіло запиту певного 
типу, воно визначено класом. Анотація @RequestParam вказує на те, що функція 
приймає параметр. ResponseEntity.ok() це сутність відповіді, в якій можна передати 
різні типи відповіді та тіло запиту. 
9
Для початку для роботи з базою даних було створено об’єкти, такі як: User,
Order, Item, Vehicle та Station. Приклад сутності бази даних Station можна побачити 
далі:
1. @Data
2. @Builder
3. @NoArgsConstructor
4. @AllArgsConstructor
5. @Entity
6. @Table(name = "station")
7. @ToString(exclude = "vehicles")
8. public class Station {
9. @Id
10. @GeneratedValue(strategy = GenerationType.SEQUENCE, generator 
= "station_seq_gen")
11. @SequenceGenerator(name = "station_seq_gen", sequenceName = 
"station_seq", allocationSize = 1)
12. private Integer id;
13. private String number;
14. private String description;
15. @Enumerated(EnumType.STRING)
16. private Type type;
17. private Double latitude;
18. private Double longitude;
19. private Double altitude;
20. @OneToMany(mappedBy = "station")
21. @JsonIgnore
22. private List<Vehicle> vehicles;
23. }
В даній сутності можна побачити звичайні поля для зберігання інформації. 
Дуже важливі геопросторові дані зберігаються як число з плаваючою точкою. Це 
дозволить легко обробляти їх у майбутньому. Можна побачити анотації бібліотеки 
Lombok: @Builder, @NoArgsConstructor, @AllArgsConstructor та 
@ToString(exclude = "vehicles"). Вони автоматично генерують гетери та сетери 
полів та метод перетворення в рядок, який виключає поле за назвою. 
Для отримання запиту та відправки відповіді також можуть 
використовуватись різні спеціальні класи, для структуризації відповіді. Було 
створено такі класи: AuthenticationRequest, AuthenticationResponse, RegisterRequest, 
StationAddRequest, StationChangeRequest, StationGetAllResponseEntity, 
10
IsSuitableRequest, VehicleAddRequest, VehicleChangeRequest, 
VehicleGetAllResponseEntity, IsSuitableRequestEntity, OrderAddRequestEntity, 
OrderChangeRequestBody, OrderProcessRequestBody, OrderSendRequestBody, 
OrderAdminGetResponseEntity, OrderUserGerResponseEntity, 
OrderVehicleGetRepsonse. Ось приклад сутності OrderAddRequestEntity:
1. @Data
2. @Builder
3. @AllArgsConstructor
4. @NoArgsConstructor
5. public class OrderAddRequestBody {
6. private String arrivalStationNumber;
7. private ZonedDateTime creationDate;
8. private List<Item> items;
9. }
Дана сутність має певні поля, які мають бути передані в запиті до функції. Це 
дозволяє керувати поведінкою програми. 
Далі були створені сервіси для основної логіки застосунку, так як:
AuthenticationService, UserService, JwtService, VehicleService, StationService, 
OrderService. Ось приклад сервісу AuthenticationService:
1. @Service
2. @RequiredArgsConstructor
3. public class AuthenticationService {
4. 
5. private final UserRepository userRepository;
6. 
7. private final PasswordEncoder passwordEncoder;
8. 
9. private final JwtService jwtService;
10. 
11. private final AuthenticationManager authenticationManager;
12. 
13. /**
14. * Registers a new user in the system based on the provided 
registration details and issues a JWT token.
15. * This method takes a registration request containing user 
details, creates a new user entity, saves it in the database,
16. * and generates a JWT token for the newly registered user.
17. *
18. * <p>Key operations include:
11
19. * <ul>
20. * <li>Building a new user entity from the registration 
request details.</li>
21. * <li>Encoding the user's password for secure storage.</li>
22. * <li>Saving the new user entity to the user 
repository.</li>
23. * <li>Generating a JWT token for authentication and 
authorization purposes.</li>
24. * </ul>
25. * </p>
26. *
27. * @param request A {@link RegisterRequest} containing the 
user's name, surname, email, phone, password, birthday, gender, and 
desired role.
28. * @return An {@link AuthenticationResponse} containing the 
JWT token for the newly registered user.
29. */
30. public AuthenticationResponse register(RegisterRequest 
request) {
31. var user = User.builder()
32. .name(request.getName())
33. .surname(request.getSurname())
34. .email(request.getEmail())
35. .phone(request.getPhone())
36. 
.password(passwordEncoder.encode(request.getPassword()))
37. .birthday(request.getBirthday())
38. .gender(request.getGender())
39. 
.creationDate(LocalDateTime.now().atZone(ZoneOffset.UTC))
40. .role(Role.USER)
41. .build();
42. 
43. userRepository.save(user);
44. 
45. var jwtTokent = jwtService.generateToken(user);
46. return AuthenticationResponse.builder()
47. .token(jwtTokent)
48. .build();
49. }
50. 
51. /**
52. * Authenticates a user based on their email and password. If 
authentication succeeds, a JWT token is issued.
53. * This method checks the user's credentials against the stored 
details in the database. If the credentials are valid,
54. * it generates a JWT token for the user, which can be used 
for further authentication and authorization tasks.
55. *
56. * <p>Key operations include:
57. * <ul>
12
58. * <li>Authenticating the user credentials using the 
authentication manager.</li>
59. * <li>Retrieving the user entity from the repository 
based on the email provided.</li>
60. * <li>Generating a JWT token for the authenticated 
user.</li>
61. * </ul>
62. * </p>
63. *
64. * @param request A {@link AuthenticationRequest} containing 
the user's email and password.
65. * @return An {@link AuthenticationResponse} containing the 
JWT token.
66. * @throws UsernameNotFoundException If no user is found with 
the provided email, indicating authentication failure.
67. */
68. public AuthenticationResponse 
authenticate(AuthenticationRequest request) {
69. authenticationManager.authenticate(
70. new UsernamePasswordAuthenticationToken(
71. request.getEmail(),
72. request.getPassword()
73. )
74. );
75. 
76. var user = userRepository.findByEmail(request.getEmail())
77. .orElseThrow(() -> new 
UsernameNotFoundException(request.getEmail()));
78. var jwtToken = jwtService.generateToken(user);
79. return AuthenticationResponse.builder()
80. .token(jwtToken)
81. .build();
82. }
83. 
84. /**
85. * Checks if the user associated with the provided JWT token 
has administrative privileges.
86. * This method extracts the username from the token, retrieves 
the corresponding user from the database,
87. * and then checks if the user has an administrator role.
88. *
89. * <p>Key operations include:
90. * <ul>
91. * <li>Extracting the username from the JWT token.</li>
92. * <li>Finding the user in the repository based on the 
extracted username.</li>
93. * <li>Checking if the user has administrative privileges 
using the JWT service.</li>
94. * </ul>
95. * </p>
96. *
97. * @param token The JWT token used to identify the user.
13
98. * @return A Boolean indicating whether the user is an 
administrator ({@code true}) or not ({@code false}).
99. * @throws UsernameNotFoundException If no user corresponds 
to the username extracted from the token or if there are other issues 
identified by an exception message.
100. */
101. public Boolean isAdmin(String token) {
102. try{
103. String username = jwtService.extractUsername(token);
104. Optional<User> optionalUser = 
userRepository.findByEmail(username);
105. if(optionalUser.isEmpty()) {
106. throw new UsernameNotFoundException("User not 
found");
107. }
108. 
109. User user = optionalUser.get();
110. return jwtService.isAdmin(token, user);
111. 
112. }catch (Exception e){
113. throw new UsernameNotFoundException("Something wrong: 
" + e.getMessage());
114. }
115. }
116. 
117. /**
118. * Determines if the user associated with the provided JWT 
token is recognized as a standard user in the system.
119. * This method extracts the username from the JWT, finds the 
corresponding user in the database, and assesses their user role.
120. *
121. * <p>Key operations include:
122. * <ul>
123. * <li>Extracting the username from the JWT token using 
the JWT service.</li>
124. * <li>Searching the user repository for a user with the 
extracted email.</li>
125. * <li>Verifying if the identified user matches the 
standard user criteria set within the JWT service.</li>
126. * </ul>
127. * </p>
128. *
129. * @param token The JWT token that is analyzed to identify 
the user.
130. * @return A Boolean indicating whether the user has standard 
user privileges ({@code true}) or not ({@code false}).
131. * @throws UsernameNotFoundException If no user corresponds 
to the username extracted from the token, or if other issues are 
identified through exception messages.
132. */
133. public Boolean isUser(String token) {
134. try{
14
135. String username = jwtService.extractUsername(token);
136. Optional<User> optionalUser = 
userRepository.findByEmail(username);
137. if(optionalUser.isEmpty()) {
138. throw new UsernameNotFoundException("User not 
found");
139. }
140. 
141. User user = optionalUser.get();
142. return jwtService.isUser(token, user);
143. 
144. }catch (Exception e){
145. throw new UsernameNotFoundException("Something wrong: 
" + e.getMessage());
146. }
147. }
148. 
149. /**
150. * Verifies the validity of a JWT token by ensuring it is 
correctly associated with a valid user and has not expired or been 
tampered with.
151. * This method extracts the username encoded within the token, 
looks up the corresponding user in the database, and then checks if 
the token remains valid with respect to the found user.
152. *
153. * <p>Key operations include:
154. * <ul>
155. * <li>Extracting the username from the JWT token using 
the JWT service.</li>
156. * <li>Finding the user in the database based on the 
extracted email.</li>
157. * <li>Validating the token against the user's details 
to ensure it has not expired or been compromised.</li>
158. * </ul>
159. * </p>
160. *
161. * @param token The JWT token to be validated.
162. * @return A Boolean indicating the validity of the token: 
{@code true} if the token is valid, {@code false} otherwise.
163. * @throws UsernameNotFoundException If no user corresponds 
to the username extracted from the token, indicating that the token 
is potentially invalid or forged.
164. */
165. public Boolean isValid(String token) {
166. String username = jwtService.extractUsername(token);
167. Optional<User> optionalUser = 
userRepository.findByEmail(username);
168. if(optionalUser.isEmpty()) {
169. throw new UsernameNotFoundException("User not found");
170. }
171. 
172. User user = optionalUser.get();
15
173. 
174. return jwtService.isTokenValid(token, user);
175. }
176. }
Він має анотацію, яка говорить програмі, що це сервіс. Також має в собі
функції з коментарями у форматі JavaDoc та обєкти типу репозиторій. В цих 
сервісах реалізована уся логіка програми та зпити до БД, але пряму взаємодію з БД 
реалізують репозиторії. 
Ось приклад репозиторію OrderRepository:
1. public interface OrderRepository extends MongoRepository<Order, 
String> {
2. Optional<Order> findByNumberAndStatusNotLike (String number, 
Status status);
3. 
4. Optional<Order> findByVehicleIdAndStatusLike(Integer vehicleId, 
Status status);
5. 
6. Optional<List<Order>> findAllByUserId(Integer userId);
7. }
Це репозиторій для запитів в БД, який є основою SpringDataJPA, яка в свою 
чергу є ОРМ Hibernate. Вона здатна створювати складні запити лише за допомогою 
створення правильної назви функції, наприклад
findByNameLikeAndNumberEquals. Це повністю заміняє написання нативних 
запитів мовою SQL.
Також були створені конфігураційні файли, які допомагають системі 
правильно завантажитися та мати певну поведінку після запуску. Ось приклад 
конфігурація SecurityConfiguration в auth-service:
1. @Configuration
2. @EnableWebSecurity
3. @RequiredArgsConstructor
4. public class SecurityConfig {
5. 
6. private final JwtAuthenticationFilter jwtAuthenticationFilter;
7. private final AuthenticationProvider authenticationProvider;
8. 
9. @Bean
10. public SecurityFilterChain securityFilterChain(HttpSecurity 
http) throws Exception{
16
11. http
12. .csrf(AbstractHttpConfigurer::disable)
13. .cors(Customizer.withDefaults())
14. .authorizeHttpRequests(auth ->
15. auth.requestMatchers("/userservice/auth/**").permitAll()
16. .requestMatchers("/userservice/user/get-userId").hasAuthority("USER")
17. .requestMatchers("/userservice/user/**").hasAuthority("ADMIN")
18. .requestMatchers(
19. "/v2/api-docs",
20. "/v3/api-docs/**",
21. "/swagger-resources",
22. "/swagger-resources/**",
23. "/configuration/ui",
24. "/configuration/security",
25. "/swagger-ui/**",
26. "/webjars/**",
27. "/swagger-ui.html",
28. "/swagger-ui/index.html"
29. ).permitAll()
30. .anyRequest().authenticated()
31. )
32. .sessionManagement(session ->
33. 
session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
34. )
35. .authenticationProvider(authenticationProvider)
36. .addFilterBefore(jwtAuthenticationFilter, 
UsernamePasswordAuthenticationFilter.class);
37. 
38. return http.build();
39. }
40. }
Дана частина системи має спеціально анотацію яка робить її 
конфігураційним файлом. Це конфігурація захисту сервісу аутентифікації. Вона 
дозволяє визначити які запити можуть бути аутентифіковані, а які можуть 
проходити без перевірки.
Також для даних були створені перечислення, для визначення наприклад 
статусів або типів замість зберігання рядка. Ось наприклад статуси замовлення:
1. public enum Status {
2. CREATED,
3. PROCESSED,
4. SENT,
17
5. DELIVERED,
6. RECEIVED,
7. DENIED
8. }
Використання таких класів для визначення певних параметрів класів 
дозволяє зберігати визначену системою структуру. Це дозволяє уникнути помилок 
з типами та статусами.
Найважливішою частиною логіки даної системи є алгоритм пошуку шляху 
для дрону. Це алгоритм А* який реалізований разом з кластерізацією точок та 
функцією розрахунку відстані між координатами. Код наведено нижче:
1. public List<Point> sendVehicle(String number, String authHeader) 
{
2. if (!isAdmin(authHeader)) {
3. throw new IllegalStateException("Invalid auth header");
4. }
5. 
6. Optional<Vehicle> optionalVehicle = 
vehicleRepository.findByNumber(number);
7. if (optionalVehicle.isEmpty()) {
8. throw new IllegalStateException("Vehicle with number: 
" + number + " does not exist");
9. }
10. 
11. Vehicle vehicle = optionalVehicle.get();
12. String token = authHeader.substring(7);
13. 
14. HttpHeaders headers = new HttpHeaders();
15. headers.set("Authorization", "Bearer " + token);
16. HttpEntity<Void> orderHttpEntity = new 
HttpEntity<>(headers);
17. 
18. String urlToOrderService = orderServiceUrl.concat("/getorder-for-vehicle?droneId=" + vehicle.getId());
19. Order order = new Order();
20. try {
21. RestTemplate restTemplate = restTemplateBuilder.build();
22. ResponseEntity<Order> responseEntity = 
restTemplate.exchange(
23. urlToOrderService,
24. HttpMethod.GET,
25. orderHttpEntity,
26. Order.class
27. );
28. 
18
29. if (responseEntity.getStatusCode().is2xxSuccessful()) 
{
30. order = responseEntity.getBody();
31. if (!Order.orderHasDetails(order)) {
32. throw new IllegalStateException("Cannot send 
drone: " + number + "because wrong order");
33. }
34. }
35. } catch (Exception e) {
36. throw new RuntimeException(e);
37. }
38. 
39. Station deptStation = vehicle.getStation();
40. 
41. Optional<Station> optionalStation = 
stationRepository.findByNumber(order.getArrivalStationNumber());
42. if (optionalStation.isEmpty()) {
43. throw new IllegalStateException("Station with number: 
" + order.getArrivalStationNumber() + " does not exist");
44. }
45. 
46. Station arvlStation = optionalStation.get();
47. 
48. Double startLat, startLon, endLat, endLon;
49. startLat = deptStation.getLatitude();
50. startLon = deptStation.getLongitude();
51. endLat = arvlStation.getLatitude();
52. endLon = arvlStation.getLongitude();
53. 
54. double minLat = Math.min(startLat, endLat) - BUFFER_RADIUS;
55. double maxLat = Math.max(startLat, endLat) + BUFFER_RADIUS;
56. double minLon = Math.min(startLon, endLon) - BUFFER_RADIUS;
57. double maxLon = Math.max(startLon, endLon) + BUFFER_RADIUS;
58. 
59. Set<Point> crossings;
60. try {
61. crossings = loadCrossingsFromOpenStreetMap(minLat, 
minLon, maxLat, maxLon);
62. } catch (Exception e) {
63. throw new RuntimeException(e);
64. }
65. 
66. Point start = new Point(startLat, startLon);
67. Point end = new Point(endLat, endLon);
68. 
69. //TODO додати запит на конкретний дрон для завантаження 
шляху
70. return findShortestPath(start, end, crossings);
71. }
72. private Set<Point> clusterPoints(Set<Coordinate> coordinates) {
73. List<DoublePoint> doublePoints = new ArrayList<>();
74. for (Coordinate coordinate : coordinates) {
19
75. doublePoints.add(new DoublePoint(new 
double[]{coordinate.y, coordinate.x}));
76. }
77. 
78. DBSCANClusterer<DoublePoint> clusterer = new 
DBSCANClusterer<>(EPS, MIN_POINTS);
79. List<Cluster<DoublePoint>> clusters = 
clusterer.cluster(doublePoints);
80. 
81. Set<Point> clusteredPoints = new HashSet<>();
82. Set<DoublePoint> clusteredDoublePoints = new HashSet<>();
83. 
84. for (Cluster<DoublePoint> cluster : clusters) {
85. double sumLat = 0, sumLon = 0;
86. for (DoublePoint doublePoint : cluster.getPoints()) {
87. double[] values = doublePoint.getPoint();
88. sumLat += values[0];
89. sumLon += values[1];
90. clusteredDoublePoints.add(doublePoint);
91. }
92. double meanLat = sumLat / cluster.getPoints().size();
93. double meanLon = sumLon / cluster.getPoints().size();
94. clusteredPoints.add(new Point(meanLat, meanLon));
95. }
96. 
97. for (DoublePoint doublePoint : doublePoints) {
98. if (!clusteredDoublePoints.contains(doublePoint)) {
99. double[] values = doublePoint.getPoint();
100. clusteredPoints.add(new Point(values[0], 
values[1]));
101. }
102. }
103. 
104. return clusteredPoints;
105. }
106. public Set<Point> loadCrossingsFromOpenStreetMap(double minLat, 
double minLon, double maxLat, double maxLon) throws Exception {
107. String url = "https://overpass-api.de/api/interpreter";
108. String data = "[out:json];" +
109. "(node[\"highway\"=\"crossing\"](" + minLat + "," 
+ minLon + "," + maxLat + "," + maxLon + ");" +
110. "node[\"highway\"=\"turning_circle\"](" + minLat 
+ "," + minLon + "," + maxLat + "," + maxLon + "););" +
111. "out;";
112. String fullUrl = url + "?data=" + data;
113. 
114. RestTemplate restTemplate = new RestTemplate();
115. ResponseEntity<String> response = 
restTemplate.getForEntity(fullUrl, String.class);
116. 
117. Set<Coordinate> crossings = new HashSet<>();
118. 
20
119. if (response.getStatusCode().is2xxSuccessful()) {
120. String responseBody = response.getBody();
121. ObjectMapper mapper = new ObjectMapper();
122. JsonNode root = mapper.readTree(responseBody);
123. JsonNode elements = root.path("elements");
124. 
125. for (JsonNode element : elements) {
126. double lat = element.get("lat").asDouble();
127. double lon = element.get("lon").asDouble();
128. crossings.add(new Coordinate(lon, lat));
129. }
130. } else {
131. throw new RuntimeException("Failed to fetch crossings 
data");
132. }
133. 
134. Set<Point> clusteredCrossings = clusterPoints(crossings);
135. 
136. return clusteredCrossings;
137. }
138. private List<Point> findShortestPath(Point start, Point end, 
Set<Point> crossings) {
139. PriorityQueue<Point> openSet = new PriorityQueue<>((a, 
b) -> {
140. double distA = distance(a, end);
141. double distB = distance(b, end);
142. return Double.compare(distA, distB);
143. });
144. openSet.offer(start);
145. Set<Point> closedSet = new HashSet<>();
146. Map<Point, Point> cameFrom = new HashMap<>();
147. Map<Point, Double> gScore = new HashMap<>();
148. 
149. gScore.put(start, 0.0);
150. 
151. crossings.add(end);
152. while (!openSet.isEmpty()) {
153. Point current = openSet.poll();
154. if (current.equals(end)) {
155. return reconstructPath(cameFrom, current);
156. }
157. closedSet.add(current);
158. for (Point neighbor : getNeighbors(current, crossings)) 
{
159. if (closedSet.contains(neighbor)) {
160. continue;
161. }
162. double tentativeScore = gScore.getOrDefault(current, 
Double.MAX_VALUE) + distance(current, neighbor);
163. if (!gScore.containsKey(neighbor) || tentativeScore 
< gScore.get(neighbor)) {
164. cameFrom.put(neighbor, current);
21
165. gScore.put(neighbor, tentativeScore);
166. openSet.offer(neighbor);
167. }
168. }
169. }
170. return Collections.emptyList();
171. }
172. private List<Point> getNeighbors(Point point, Set<Point> 
crossings) {
173. List<Point> neighbors = new ArrayList<>();
174. for (Point crossing : crossings) {
175. double dist = distance(point, crossing);
176. if (!crossing.equals(point) && dist < 
MIN_NEIGHBOUR_DISTANCE) {
177. neighbors.add(crossing);
178. }
179. }
180. return neighbors;
181. }
182. 
183. private List<Point> reconstructPath(Map<Point, Point> cameFrom, 
Point current) {
184. List<Point> path = new ArrayList<>();
185. path.add(current);
186. while (cameFrom.containsKey(current)) {
187. current = cameFrom.get(current);
188. path.add(current);
189. }
190. Collections.reverse(path);
191. return path;
192. }
193. private double distance(Point p1, Point p2) {
194. double lat1 = Math.toRadians(p1.getLatitude());
195. double lon1 = Math.toRadians(p1.getLongitude());
196. double lat2 = Math.toRadians(p2.getLatitude());
197. double lon2 = Math.toRadians(p2.getLongitude());
198. 
199. double dlon = lon2 - lon1;
200. double dlat = lat2 - lat1;
201. double a = Math.pow(Math.sin(dlat / 2), 2)
202. + Math.cos(lat1) * Math.cos(lat2)
203. * Math.pow(Math.sin(dlon / 2), 2);
204. 
205. double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 -
a));
206. double r = 6371; // Радіус Землі в кілометрах
207. return c * r;
208. }
209. 
210. private double distance(double lat1, double lon1, double 
lat2, double lon2) {
211. lat1 = Math.toRadians(lat1);
22
212. lon1 = Math.toRadians(lon1);
213. lat2 = Math.toRadians(lat2);
214. lon2 = Math.toRadians(lon2);
215. 
216. double dlon = lon2 - lon1;
217. double dlat = lat2 - lat1;
218. 
219. double a = Math.pow(Math.sin(dlat / 2), 2)
220. + Math.cos(lat1) * Math.cos(lat2)
221. * Math.pow(Math.sin(dlon / 2), 2);
222. double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 -
a));
223. double r = 6371;
224. 
225. return c * r;
226. }
Цей код реалізує логіку для управління транспортними засобами через API, 
включаючи надсилання транспорту, перевірку доступності та обробку запитів. 
Перший метод, sendVehicle, виконує ряд перевірок: аутентифікація користувача, 
пошук транспорту у базі даних, виклик зовнішньої служби для отримання 
замовлення та підготовка маршруту. Код перевіряє, чи є користувач 
адміністратором. У разі невдачі викидається виняток. Якщо транспортний засіб не 
знайдено за номером, генерується інший виняток. Знайдений транспортний засіб 
робить HTTP-запит до сервісу замовлень для отримання замовлення. Програма 
обробляє можливі помилки у відповіді та визначає географічні координати початку 
і кінця маршруту, використовуючи відкриті дані для планування перетинів.
Для отримання геопросторових даних на координаха для початку рахується 
мінімальні та максимальні координати пармокуної області з урахуванням 
дозволеного буферу:
48. Double startLat, startLon, endLat, endLon;
49. startLat = deptStation.getLatitude();
50. startLon = deptStation.getLongitude();
51. endLat = arvlStation.getLatitude();
52. endLon = arvlStation.getLongitude();
53. 
54. double minLat = Math.min(startLat, endLat) - BUFFER_RADIUS;
55. double maxLat = Math.max(startLat, endLat) + BUFFER_RADIUS;
23
56. double minLon = Math.min(startLon, endLon) - BUFFER_RADIUS;
57. double maxLon = Math.max(startLon, endLon) + BUFFER_RADIUS;
58. 
59. Set<Point> crossings;
60. try {
61. crossings = loadCrossingsFromOpenStreetMap(minLat, 
minLon, maxLat, maxLon);
62. } catch (Exception e) {
63. throw new RuntimeException(e);
64. }
65.
Далі функція робить запит до відкритого Overpass-turbo API для отримання 
відкритих геопросторових даних на визначеній ділянці:
106. public Set<Point> loadCrossingsFromOpenStreetMap(double minLat, 
double minLon, double maxLat, double maxLon) throws Exception {
107. String url = "https://overpass-api.de/api/interpreter";
108. String data = "[out:json];" +
109. "(node[\"highway\"=\"crossing\"](" + minLat + "," 
+ minLon + "," + maxLat + "," + maxLon + ");" +
110. "node[\"highway\"=\"turning_circle\"](" + minLat 
+ "," + minLon + "," + maxLat + "," + maxLon + "););" +
111. "out;";
112. String fullUrl = url + "?data=" + data;
113. 
114. RestTemplate restTemplate = new RestTemplate();
115. ResponseEntity<String> response = 
restTemplate.getForEntity(fullUrl, String.class);
116. 
117. Set<Coordinate> crossings = new HashSet<>();
118. 
119. if (response.getStatusCode().is2xxSuccessful()) {
120. String responseBody = response.getBody();
121. ObjectMapper mapper = new ObjectMapper();
122. JsonNode root = mapper.readTree(responseBody);
123. JsonNode elements = root.path("elements");
124. 
125. for (JsonNode element : elements) {
126. double lat = element.get("lat").asDouble();
127. double lon = element.get("lon").asDouble();
128. crossings.add(new Coordinate(lon, lat));
129. }
130. } else {
131. throw new RuntimeException("Failed to fetch crossings 
data");
132. }
133. 
134. Set<Point> clusteredCrossings = clusterPoints(crossings);
135. 
24
136. return clusteredCrossings;
137. }
На початку формується запит до апі, після чого він робиться за допомогою
рядка 115. Після чого з 119 по 132 рядок відповідь оброблюється . На рядку 134 
викликається функція кластерізації. Це робиться для того, щоб прибрати зайві геопросторові дані, які можна об’єднати в одну точку, якщо вони розташовані поряд:
72. private Set<Point> clusterPoints(Set<Coordinate> coordinates) {
73. List<DoublePoint> doublePoints = new ArrayList<>();
74. for (Coordinate coordinate : coordinates) {
75. doublePoints.add(new DoublePoint(new 
double[]{coordinate.y, coordinate.x}));
76. }
77. 
78. DBSCANClusterer<DoublePoint> clusterer = new 
DBSCANClusterer<>(EPS, MIN_POINTS);
79. List<Cluster<DoublePoint>> clusters = 
clusterer.cluster(doublePoints);
80. 
81. Set<Point> clusteredPoints = new HashSet<>();
82. Set<DoublePoint> clusteredDoublePoints = new HashSet<>();
83. 
84. for (Cluster<DoublePoint> cluster : clusters) {
85. double sumLat = 0, sumLon = 0;
86. for (DoublePoint doublePoint : cluster.getPoints()) {
87. double[] values = doublePoint.getPoint();
88. sumLat += values[0];
89. sumLon += values[1];
90. clusteredDoublePoints.add(doublePoint);
91. }
92. double meanLat = sumLat / cluster.getPoints().size();
93. double meanLon = sumLon / cluster.getPoints().size();
94. clusteredPoints.add(new Point(meanLat, meanLon));
95. }
96. 
97. for (DoublePoint doublePoint : doublePoints) {
98. if (!clusteredDoublePoints.contains(doublePoint)) {
99. double[] values = doublePoint.getPoint();
100. clusteredPoints.add(new Point(values[0], 
values[1]));
101. }
102. }
103. 
104. return clusteredPoints;
105. }
25
Спочатку координати перетворюються в список об’єктів DoublePoint для 
обробки у рядках 73-76. Далі проводиться кластерізація всіх точок, які знаходяться 
поряд одна з одною(рядок 84-95). Після цього у другому циклі додаються точки, 
які не кластерізувались(рядок 97-102). Після цього повертається масив 
кластерізованих точок.
Наступні функції виконують допоміжну роботу, бо вони є частиною 
алгоритму, тільки винесені в окремі функції:
172. private List<Point> getNeighbors(Point point, Set<Point> 
crossings) {
173. List<Point> neighbors = new ArrayList<>();
174. for (Point crossing : crossings) {
175. double dist = distance(point, crossing);
176. if (!crossing.equals(point) && dist < 
MIN_NEIGHBOUR_DISTANCE) {
177. neighbors.add(crossing);
178. }
179. }
180. return neighbors;
181. }
Дана фукнція шукає сусідів в заданій області. Відстань, яку можна вважати 
билзькою для сусіда винесено в константу MIN_NEIGHBOUR_DISTANCE. 
Далі фукнція для реконструкції шляху:
183. private List<Point> reconstructPath(Map<Point, Point> cameFrom, 
Point current) {
184. List<Point> path = new ArrayList<>();
185. path.add(current);
186. while (cameFrom.containsKey(current)) {
187. current = cameFrom.get(current);
188. path.add(current);
189. }
190. Collections.reverse(path);
191. return path;
192. }
Вона обробляє Map колекцію та переводить її в потрібний для пошуку шляху 
вигляд. 
Далі функції пошуку відстані між координатами: 
26
193. private double distance(Point p1, Point p2) {
194. double lat1 = Math.toRadians(p1.getLatitude());
195. double lon1 = Math.toRadians(p1.getLongitude());
196. double lat2 = Math.toRadians(p2.getLatitude());
197. double lon2 = Math.toRadians(p2.getLongitude());
198. 
199. double dlon = lon2 - lon1;
200. double dlat = lat2 - lat1;
201. double a = Math.pow(Math.sin(dlat / 2), 2)
202. + Math.cos(lat1) * Math.cos(lat2)
203. * Math.pow(Math.sin(dlon / 2), 2);
204. 
205. double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 -
a));
206. double r = 6371; // Радіус Землі в кілометрах
207. return c * r;
208. }
209. 
210. private double distance(double lat1, double lon1, double 
lat2, double lon2) {
211. lat1 = Math.toRadians(lat1);
212. lon1 = Math.toRadians(lon1);
213. lat2 = Math.toRadians(lat2);
214. lon2 = Math.toRadians(lon2);
215. 
216. double dlon = lon2 - lon1;
217. double dlat = lat2 - lat1;
218. 
219. double a = Math.pow(Math.sin(dlat / 2), 2)
220. + Math.cos(lat1) * Math.cos(lat2)
221. * Math.pow(Math.sin(dlon / 2), 2);
222. double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 -
a));
223. double r = 6371;
224. 
225. return c * r;
226. }
Ці дві функції однакові, але приймають різні параметри. Це алгоритм 
Гаверсінуса для знаходження відстані на кулі за координатами. Він з високою 
точністю розраховує відстань. Спочатку перетворює граду у радіани, після чого 
розраховує різницю широти та довготи. Потім визначає кут між точкамиі в кінці 
рахує відстань