У розробці веб-застосунку даної системи було використано бібліотеку 
ReactJS з використанням мови Typescript. Typescript – це надбудова над JavaScript, 
яка додає типізацію та ООП підхід для розробки на JavaScript. Бібліотека ReactJS –
це сучасна бібліотека для розробки веб-застосунків різної складності. Було 
використано MUI-material бібліотеку для створення інтерфейсу користувача, 
бібліотеку axios для реалізації зв’язку з сервером та отримання даних. 
Веб-застосунок створений з використанням шарової або багаторівневої 
архітектури. Використання цієї архітектури дозволяє розділити код застосунку на 
окремі логічні блоки – рівні. Кожен рівень має чітко визначений функціонал та 
відповідає тільки за свою частину роботи. Так, структура проєкту має наступний 
вигляд.
− Головний файл програми, до якого підключені маршрути до сторінок;
− Сторінки, такі як: Orders, OrderProcess, Vehicles, VehicleChange, 
VehicleCreate, Stations, StationCreate, StationChange, Users, Authenticate. В них 
реалізоване коректне відображення даних та використані функції для взаємодії з 
серверною частиною;
− Компоненти сторінок, тобто об’єкти які можуть бути використані 
одразу на декількох сторінках. Вони містять визначену структуру компоненту за 
допомогою спеціальних HTML тегів та тегів бібліотеки MUI, яка відповідає за його 
стилі. Компонентами є: Header, Footer, MainContent, Datatable, Dropdown. Також є 
допоміжний компонент PrivateRoute, який використовується для відкриття вікна 
аутентифікації, якщо користувач не увійшов в систему;
− Контекст AuthContext зберігає стан користувача та його токен, для 
подальшого його використання. Вона має спеціальний інтерфейс, який визначає 
структуру даних, які мають бути збережені як стан(додаток А). Також в ній 
реалізована функція для аутентифікації та виходу з системи, яка використовується 
у Authentication сторінці;
− Сервіси використовуються для взаємодії з серверною частиною 
системи. Саме в них реалізовані запити за допомогою бібліотеки axios. Такими 
сервісами є AuthService, UserService, OrderService, VehicleService, StationService.
Вони містять інтерфейси даних для структуризації відповідей та запитів, а також 
функції, які виконують ці запити.
Можна зробити висновок, що дана архітектура допомагає правильно 
організувати проєкт так, що його можна було покращити, змінити або провести 
рефакторінг не витрачаючи час на зміну кожного елементу коду усюди, де він 
використовується. Дана архітектура широко використовується у розробці 
застосунків різної складності.
Подивимось частину коду, яка надає приклад для розуміння того, яка 
побудований даний проєкт у додатку А.
Бачимо компонент Datatable.tsx – компонент, який визначає структуру та 
стилі таблиці, в якій будуть зберігатись дані. 
Далі подивимось на код сервісу OrderService.ts. Можемо бачити константу, в 
якій зберігається шлях до сервісу замовлень. Далі бачимо інтерфейси Item та Order
які є об’єктом, який має бути отриманий з серверу. Далі є функція fetchOrders, яка 
робить запит на сервер для отримання усіх замовлень. У заголовку запиту 
встановлено токен, який отримує функція. Також далі можна бачити інші 
інтерфейси, які використовуються у певних функціях. 
Далі перейдемо до розгляду Orders.tsx. Можемо бачити інтерфейси, які 
будуть використані у функціях отримання та обробки даних Order та AdaptedOrder
для відображення в таблиці. Далі колекція заголовків таблиці tableHeader. Далі 
бачимо константу яка є даною сторнікою. В ній визначено функції, які мають 
дістати дані, адаптувати їх під відображення та відобразити. Так loadData отримує 
дані від сервера, за допомогою використання сервісу OrderService. Далі отримані 
дані «адаптуються» для відображення на сторінці після чого вже повертається 
структура сторінки, яку побачить користувач. 
